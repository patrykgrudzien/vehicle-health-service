# ===============================
# = (CUSTOM CONFIGURATION)
# ===============================
custom:
  properties:
    endpoints:
      registration:
        root: /registration
        register-user-account: /register-user-account
        confirm-registration: /confirm
        confirmation-url: /confirm?token=
        confirmed: /registration-confirmed
        confirmed-token-not-found: /registration-confirmed?error=tokenNotFound
        confirmed-token-expired: /registration-confirmed?error=tokenExpired
        user-already-enabled: /registration-confirmed?info=userAlreadyEnabled
        resend-email-verification-token: /resend-verification-token?token=
      authentication:
        root: /auth
        failure-url: /login?error=true
        principal-user: /principal-user
        refresh-token: /refresh-token
      heroku:
        context-path: https://vehicle-health-service.herokuapp.com
      vehicle-resource:
        root: /vehicles
        get-vehicle: "/vehicle/{ownerEmailAddress}"
        get-current-mileage: "/vehicle/get-current-mileage/{ownerEmailAddress}"
        update-current-mileage: "/vehicle/update-current-mileage/{ownerEmailAddress}"
      oauth2:
        login-page: http://localhost:8080/login # TODO: must be updated because on production context is different (for now testing purpose)
        short-lived-millis: 120000 # 2 minutes
        user-logged-in-using-google: /user-logged-in-using-google
        user-not-found: /user-not-found
        user-account-is-locked: /user-account-is-locked
        user-is-disabled: /user-is-disabled
        user-account-is-expired: /user-account-is-expired
        user-account-already-exists: /user-account-already-exists
        credentials-have-expired: /credentials-have-expired
        jwt-token-not-found: /jwt-token-not-found
        registration-provider-mismatch: /registration-provider-mismatch
        bad-credentials: /bad-credentials
        user-registered-using-google: /user-registered-using-google
        exchange-short-lived-token: /exchange-short-lived-token
        failure-target-url: /failure-target-url
    cors-origins:
      front-end-module: http://localhost:8080
      back-end-module: http://localhost:8088
    jwt:
      header: Authorization
      secret: super-secret-authorization-token-password
      expiration: 900000 # 15 minutes
    messages-language:
      header: Language

# ===============================
# = (SPRING)
# ===============================
spring:
  profiles:
    active: dev-home
  # -----> JavaMail Configuration
  mail:
    default-encoding: UTF-8
    host: smtp.gmail.com
    username: vehicle.health.service@gmail.com
    password: Pg91tmsecretHdvhs
    port: 587
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
    test-connection: false
  # -----> JPA configurations
  jpa:
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true

---

# ===============================================================
# = (dev-home) PROFILE
# ===============================================================
server:
  port: 8088
spring:
  profiles: dev-home
  # -----> Hibernate datasource
  datasource:
    url: jdbc:postgresql://localhost:5432/vehicle-health-service-db
    username: postgres
    password: admin
    driver-class-name: org.postgresql.Driver
    hikari:
      minimum-idle: 5
      maximum-pool-size: 20
      idle-timeout: 30000
      pool-name: VehicleHealthServiceConnectionPool
      max-lifetime: 2000000
      connection-timeout: 60000
  # -----> JPA configurations
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.PostgreSQL94Dialect
  # -----> OAuth 2
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 289764469472-jnvmuvelohvieo6bn1362p89qkt6cjrk.apps.googleusercontent.com
            client-secret: LjrrABzPkzbvUHkqmRm7pNqp
            client-name: GOOGLE
          facebook:
            client-id: 677962172580314
            client-secret: a9eac62a4cd5d78d49aa6dd87582cf86
            client-name: FACEBOOK

---

# ===============================================================
# = (dev-office) PROFILE
# ===============================================================
server:
  port: 8088
spring:
  profiles: dev-office
  # -----> Hibernate datasource
  datasource:
    url: jdbc:postgresql://localhost:5432/vehicle-health-service-db
    username: postgres
    password: password
    driver-class-name: org.postgresql.Driver
    hikari:
      minimum-idle: 5
      maximum-pool-size: 20
      idle-timeout: 30000
      pool-name: VehicleHealthServiceConnectionPool
      max-lifetime: 2000000
      connection-timeout: 60000
  # -----> JPA configurations
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.PostgreSQL94Dialect
  # -----> OAuth 2
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 289764469472-jnvmuvelohvieo6bn1362p89qkt6cjrk.apps.googleusercontent.com
            client-secret: LjrrABzPkzbvUHkqmRm7pNqp
            client-name: GOOGLE
          facebook:
            client-id: 677962172580314
            client-secret: a9eac62a4cd5d78d49aa6dd87582cf86
            client-name: FACEBOOK

---

# ===============================================================
# = (heroku-deployment) PROFILE
# ===============================================================
server:
  port: ${PORT:8088}
spring:
  profiles: heroku-deployment
  # -----> Hibernate datasource
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari:
      minimum-idle: 5
      maximum-pool-size: 20
      idle-timeout: 30000
      pool-name: VehicleHealthServiceConnectionPool
      max-lifetime: 2000000
      connection-timeout: 60000
  # -----> JPA configurations
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQL94Dialect